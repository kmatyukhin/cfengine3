bundle common borgbackup
{
  vars:
      "servers" slist  => { 'raspberrypi' };
      "clients" slist  => { 'air', 'provenza', 'netrino' };
}

bundle agent borgbackup_autorun
{
  meta:
      "tags" slist => { "autorun" };

  packages:
      "borgbackup"
        package_policy => "addupdate";

  methods:
      "server"
        usebundle => borgbackup_server,
        ifvarclass => "$(borgbackup.servers)";
      "client"
        usebundle => borgbackup_client,
        ifvarclass => "$(borgbackup.clients)";
}

bundle agent borgbackup_server
{
  vars:
      "source_server"    string => "$(sys.policy_hub)";
      "source_directory" string => "$(def.dir_files)";
      "user"             string => "borg";

  files:
    borg_user_present::
      "/home/$(user)/.ssh/$(borgbackup.clients)_borgbackup.pub"
        copy_from => remote_cp("$(source_directory)/$(borgbackup.servers)/borgbackup/$(borgbackup.clients)_borgbackup.pub", "$(source_server)"),
        edit_defaults => empty,
        perms => mog("600", "$(user)", "$(user)"),
        action => if_elapsed("60");
      "/home/$(user)/.ssh/authorized_keys"
        create => "true",
        edit_line => insert_file_if_no_line_matching("$(user)", "$(source_directory)/$(borgbackup.servers)/borgbackup/$(borgbackup.clients)_borgbackup.pub"),
        perms => mog("600", "$(user)", "$(user)"),
        action => if_elapsed("60");

  users:
      "$(user)"
        policy => "present",
        description => "BorgBackup User",
        shell => "/bin/bash",
        home_bundle => borgbackup_home_dir("$(this.promiser)"),
        classes => if_ok("borg_user_present");
}

bundle agent borgbackup_client
{
  vars:
      "source_server"    string => "$(sys.policy_hub)";
      "source_directory" string => "$(def.dir_files)";

      "pkgs" slist => {
        "python3-setuptools",
        "python3-pip",
        "borgbackup",
      };

  classes:
      "borgmatic_installed"
        if => fileexists("/usr/local/bin/borgmatic");

  packages:
      "$(pkgs)"
        package_policy => "addupdate",
        classes => if_ok("python3_installed");

  files:
    borgmatic_installed::
      "/etc/borgmatic/config.yaml"
        copy_from => remote_cp("$(source_directory)/$(borgbackup.clients)/borgmatic/config.yaml", "$(source_server)"),
        edit_defaults => std_defs,
        perms => m("600");

  commands:
    python3_installed.!borgmatic_installed::
      "/usr/bin/pip3"
        args => "install borgmatic";
}

bundle agent borgbackup_home_dir(user)
{
  files:
      "/home/$(user)/."
        create => "true",
        perms => mog("755", "$(user)", "$(user)");
      "/home/$(user)/.ssh/."
        create => "true",
        perms => mog("700", "$(user)", "$(user)");
}

bundle edit_line insert_file_if_no_line_matching(user, file)
{
  classes:
      "have_user"
        expression => regline("^.*$(user).*$", "$(this.promiser)");

  insert_lines:
    !have_user::
      "$(file)"
        insert_type => "file";
}
