###############################################################################
#
# bundle agent main
#  - User/Site policy entry
#
###############################################################################

bundle agent main
# User Defined Service Catalogue
{
  services:
      "ssh" service_policy => "start";

  methods:
    any::
      "packages"   usebundle => additional_packages;
      "sysctl"     usebundle => edit_sysctl;
      "udisks2"    usebundle => udisks2_rules;
      "vcs_update" usebundle => vcs_update;
      "ssh"        usebundle => ssh_setup;
    raspberrypi::
      "eth0_alias" usebundle => eth0_alias;
      "ipv6"       usebundle => enable_ipv6;
      "minidlna"   usebundle => minidlna_setup;
      "devmon"     usebundle => devmon_setup;
}

bundle agent additional_packages
{
  vars:
      "pkgs" slist => {
                        "git",
                        "iptables-persistent",
                        "ntfs-3g",
                        "rtorrent",
                        "udisks2",
                      };

  files:
    any::
      "$(sys.workdir)/modules/packages/."
        create => "true";
      "$(sys.workdir)/modules/packages/apt_get"
        copy_from => perms_cp("/usr/share/cfengine3/modules/packages/apt_get");

  packages:
    any::
      "$(pkgs)"
        package_policy => "addupdate";
}

bundle agent edit_sysctl
{
  files:
      "/etc/sysctl.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => uncomment_lines_matching("net.ipv4.ip_forward=1", "#");
      "/etc/sysctl.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => uncomment_lines_matching("net.ipv6.conf.all.forwarding=1", "#");
}

bundle agent minidlna_setup
{
  vars:
       "minidlna_conf[inotify]" string => "yes";
       "minidlna_conf[force_sort_criteria]" string => "+dc:title";
       "minidlna_conf[media_dir]" string => "V,/media/EXTDISK/Videos";
  files:
    minidlna_installed::
      "/etc/minidlna.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => set_line_based("$(this.bundle).minidlna_conf", "=", "\s*=\s*", ".*", "\s*#\s*");
  packages:
      "minidlna"
        package_policy => "addupdate",
        classes => if_ok("minidlna_installed");
}

bundle agent eth0_alias
{
  vars:
      "lines" string =>
"auto eth0:1
allow-hotplug eth0:1
iface eth0:1 inet static
    address 192.168.133.1
    netmask 255.255.255.0";

  files:
      "/etc/network/interfaces.d/eth0_alias"
        create => "true",
        edit_defaults => no_backup,
        edit_line => append_if_no_line("$(eth0_alias.lines)");
}

bundle agent udisks2_rules
{
  vars:
      "lines" string =>
"ENV{ID_FS_USAGE}==\"filesystem|other|crypto\", ENV{UDISKS_FILESYSTEM_SHARED}=\"1\"";

  files:
      "/etc/udev/rules.d/99-udisks2.rules"
        create => "true",
        edit_defaults => no_backup,
        edit_line => append_if_no_line("$(udisks2_rules.lines)");
}

bundle agent enable_ipv6
{
  files:
      "/etc/modprobe.d/ipv6.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => comment_lines_matching("alias net-pf-10 off", "#");
}

bundle agent devmon_setup
{
  classes:
      "devmon_fixed"
        if => fileexists("/usr/lib/systemd/system/devmon@.service");

  files:
    devmon_installed.!devmon_fixed::
      "/usr/lib/systemd/system/devmon@.service"
        copy_from => perms_cp("/usr/lib/arm-linux-gnueabihf/systemd/system/devmon@.service");

  packages:
      "udevil"
        package_policy => "addupdate",
        classes => if_ok("devmon_installed");
}

bundle agent vcs_update
{
  commands:
    policy_server::
      "/usr/bin/git"
        args => "pull --ff-only origin master",
        contain => silent_in_dir("$(sys.masterdir)");
}

bundle agent ssh_setup
{
  vars:
      "source_server"      string => "$(sys.policy_hub)";
      "source_directory"   string => "$(def.dir_files)";

      "users[raspberrypi]" slist => { "pi" };
      "users[air]"         slist => { "kv" };

      "ssh_server"         slist => getindices("users");

 files:
      "/home/$(users[$(ssh_server)])/.ssh"
        copy_from => remote_cp("$(source_directory)/$(ssh_server)/ssh", "$(source_server)"),
        file_select => pub_key_files("$(users[$(ssh_server)])"),
        perms => mog("600", "$(users[$(ssh_server)])", "$(users[$(ssh_server)])"),
        depth_search => recurse("inf"),
        ifvarclass => "$(ssh_server)",
        classes => if_repaired("update_authorized_keys");

    update_authorized_keys::
      "/home/$(users[$(ssh_server)])/.ssh/authorized_keys"
        create => "true",
        edit_defaults => empty,
        transformer => "/bin/sed -i '$r $(this.promiser)' /home/$(users[$(ssh_server)])/.ssh/authorized_keys",
        file_select => pub_key_files("$(users[$(ssh_server)])"),
        depth_search => recurse("inf"),
        perms => mog("600", "$(users[$(ssh_server)])", "$(users[$(ssh_server)])"),
        ifvarclass => "$(ssh_server)";
}

body file_select pub_key_files(user)
{
      leaf_name => { "$(user)_.*\.pub" };
      file_result => "leaf_name";
}
