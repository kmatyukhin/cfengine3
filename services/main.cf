###############################################################################
#
# bundle agent main
#  - User/Site policy entry
#
###############################################################################

bundle agent main
# User Defined Service Catalogue
{
  classes:
      "samba_server" or => { "raspberrypi" };
      "dns_server"   or => { "raspberrypi" };
      "mail_server"  or => { "netrino" };

  services:
      "ssh" service_policy => "start";

  methods:
    any::
      "packages"    usebundle => additional_packages;
      "sysctl"      usebundle => edit_sysctl;
      "udisks2"     usebundle => udisks2_rules;
      "ssh"         usebundle => ssh_setup;
    policy_server::
      "vcs_update"  usebundle => vcs_update;
    samba_server::
      "samba"       usebundle => samba_setup;
    dns_server::
      "dns_server"  usebundle => dns_server_setup;
    mail_server::
      "mail_server" usebundle => mail_server_setup;
    raspberrypi::
      "eth0_alias"  usebundle => eth0_alias;
      "ipv6"        usebundle => enable_ipv6;
      "minidlna"    usebundle => minidlna_setup;
      "devmon"      usebundle => devmon_setup;
    netrino::
      "users"       usebundle => users_setup;
}

bundle agent users_setup
{
  vars:
      "users" data => parsejson('{
        "netrino": {
          "kv": {
            "uid": 1000,
            "gid": 1000
          }
        }
      }');
      "hosts" slist => getindices("users");
      "users_$(hosts)" slist => getindices("users[$(hosts)]");
      "sudo_nopasswd" string => "ALL=(ALL) NOPASSWD: ALL";

  classes:
      "group_$(users_$(hosts))_absent"
        not => groupexists("$(users_$(hosts))");

  commands:
      "$(paths.groupadd)"
        args => "--gid $(users[$(hosts)][$(users_$(hosts))][gid]) $(users_$(hosts))",
        ifvarclass => "group_$(users_$(hosts))_absent";

  users:
      "$(users_$(hosts))"
        uid => "$(users[$(hosts)][$(users_$(hosts))][uid])",
        group_primary => "$(users_$(hosts))",
        home_dir => "/home/$(users_$(hosts))",
        home_bundle => home_skel("$(users_$(hosts))", "/etc/skel"),
        shell => "/bin/bash",
        policy => "present",
        ifvarclass => "!group_$(users_$(hosts))_absent";

  files:
      "/etc/sudoers.d/010_nopasswd"
        create => "true",
        edit_defaults => no_backup,
        edit_line => append_if_no_line("$(users_$(hosts)) $(sudo_nopasswd)");
}

bundle agent home_skel(user, skel)
{
  files:
      "/home/$(user)/."
        create => "true",
        perms => mog("750", $(user), $(user));
      "/home/$(user)/."
        copy_from => seed_cp($(skel)),
        perms => mog("644", $(user), $(user)),
        depth_search => recurse("inf");
}

bundle agent additional_packages
{
  vars:
      "pkgs" slist => {
        "git",
        "iptables-persistent",
        "ntfs-3g",
        "rtorrent",
        "udisks2",
        "rsync",
      };

  files:
    any::
      "$(sys.workdir)/modules/packages/."
        create => "true";
      "$(sys.workdir)/modules/packages/apt_get"
        copy_from => perms_cp("/usr/share/cfengine3/modules/packages/apt_get");

  packages:
    any::
      "$(pkgs)"
        package_policy => "addupdate";
}

bundle agent edit_sysctl
{
  files:
      "/etc/sysctl.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => uncomment_lines_matching("net.ipv4.ip_forward=1", "#");
      "/etc/sysctl.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => uncomment_lines_matching("net.ipv6.conf.all.forwarding=1", "#");
}

bundle agent minidlna_setup
{
  vars:
       "minidlna_conf[inotify]" string => "yes";
       "minidlna_conf[force_sort_criteria]" string => "+dc:title";
       "minidlna_conf[media_dir]" string => "V,/media/EXTDISK/Videos";

  files:
    minidlna_installed::
      "/etc/minidlna.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => set_line_based("$(this.bundle).minidlna_conf", "=", "\s*=\s*", ".*", "\s*#\s*");

  packages:
      "minidlna"
        package_policy => "addupdate",
        classes => if_ok("minidlna_installed");
}

bundle agent eth0_alias
{
  vars:
      "lines" string =>
"auto eth0:1
allow-hotplug eth0:1
iface eth0:1 inet static
    address 192.168.133.1
    netmask 255.255.255.0";

  files:
      "/etc/network/interfaces.d/eth0_alias"
        create => "true",
        edit_defaults => no_backup,
        edit_line => append_if_no_line("$(eth0_alias.lines)");
}

bundle agent udisks2_rules
{
  vars:
      "lines" string =>
        "ENV{ID_FS_USAGE}==\"filesystem|other|crypto\", ENV{UDISKS_FILESYSTEM_SHARED}=\"1\"";

  files:
      "/etc/udev/rules.d/99-udisks2.rules"
        create => "true",
        edit_defaults => no_backup,
        edit_line => append_if_no_line("$(udisks2_rules.lines)");
}

bundle agent enable_ipv6
{
  files:
      "/etc/modprobe.d/ipv6.conf"
        create => "false",
        edit_defaults => no_backup,
        edit_line => comment_lines_matching("alias net-pf-10 off", "#");
}

bundle agent devmon_setup
{
  classes:
      "devmon_fixed"
        if => fileexists("/usr/lib/systemd/system/devmon@.service");

  files:
    devmon_installed.!devmon_fixed::
      "/usr/lib/systemd/system/devmon@.service"
        copy_from => perms_cp("/usr/lib/arm-linux-gnueabihf/systemd/system/devmon@.service");

  packages:
      "udevil"
        package_policy => "addupdate",
        classes => if_ok("devmon_installed");
}

bundle agent vcs_update
{
  commands:
      "/usr/bin/git"
        args => "pull --ff-only origin master",
        contain => silent_in_dir("$(sys.masterdir)");
}

bundle agent ssh_setup
{
  vars:
      "source_server"      string => "$(sys.policy_hub)";
      "source_directory"   string => "$(def.dir_files)";

      "users[raspberrypi]" slist => { "pi" };
      "users[air]"         slist => { "kv" };
      "users[netrino]"     slist => { "kv" };

      "ssh_server"         slist => getindices("users");

      "sshd_conf[PermitRootLogin]"                 string => "no";
      "sshd_conf[PasswordAuthentication]"          string => "no";
      "sshd_conf[ChallengeResponseAuthentication]" string => "no";
      "sshd_conf[UsePAM]"                          string => "no";

 files:
      "/etc/ssh/sshd_config"
        create => "false",
        edit_line => set_line_based("$(this.bundle).sshd_conf", " ", "\s+", ".*", "\s*#\s*");
      "/home/$(users[$(ssh_server)])/.ssh/."
        create => "true",
        perms => mog("700", "$(users[$(ssh_server)])", "$(users[$(ssh_server)])"),
        ifvarclass => "$(ssh_server)";
      "/home/$(users[$(ssh_server)])/.ssh"
        copy_from => remote_cp("$(source_directory)/$(ssh_server)/ssh", "$(source_server)"),
        file_select => pub_key_files("$(users[$(ssh_server)])"),
        perms => mog("600", "$(users[$(ssh_server)])", "$(users[$(ssh_server)])"),
        depth_search => recurse("inf"),
        ifvarclass => "$(ssh_server)",
        classes => if_repaired("create_authorized_keys");
    create_authorized_keys::
      "/home/$(users[$(ssh_server)])/.ssh/authorized_keys"
        create => "true",
        edit_defaults => empty,
        edit_line => insert_lines("# --- updated by CFEngine --- #"),
        perms => mog("600", "$(users[$(ssh_server)])", "$(users[$(ssh_server)])"),
        ifvarclass => "$(ssh_server)",
        classes => if_repaired("authorized_keys_created");
    authorized_keys_created::
      "/home/$(users[$(ssh_server)])/.ssh"
        transformer => "/bin/sed -i '$r $(this.promiser)' /home/$(users[$(ssh_server)])/.ssh/authorized_keys",
        file_select => pub_key_files("$(users[$(ssh_server)])"),
        depth_search => recurse("inf"),
        ifvarclass => "$(ssh_server)";
}

body file_select pub_key_files(user)
{
  leaf_name => { "$(user)_.*\.pub" };
  file_result => "leaf_name";
}

bundle agent samba_setup
{
  vars:
      "shares" data => parsejson('{
        "raspberrypi": {
          "music": {
            "path": "/media/EXTDISK/Music",
            "browsable": "yes",
            "guest ok": "yes",
            "read only": "yes",
            "write list": "pi",
            "create mask": "0755"
          },
          "video": {
            "path": "/media/EXTDISK/Videos",
            "browsable": "yes",
            "guest ok": "yes",
            "read only": "yes",
            "write list": "pi",
            "create mask": "0755"
          }
        }
      }');
      "samba_server" slist => getindices("shares");
      "shares_$(samba_server)" slist => getindices("shares[$(samba_server)]");

  packages:
      "samba"
        package_policy => "addupdate";

  files:
      "/etc/samba/smb.conf"
        edit_line => insert_before_if_no_line("[homes]", "[$(shares_$(samba_server))]"),
        classes => if_ok("shares_$(samba_server)_ok");
      "/etc/samba/smb.conf"
        edit_line => manage_variable_values_ini("$(this.bundle).shares[$(samba_server)]", "$(shares_$(samba_server))"),
        ifvarclass => "$(samba_server).shares_$(samba_server)_ok",
        classes => if_repaired("$(samba_server)_reload_samba");

  processes:
      "smbd"
        restart_class => "$(samba_server)_reload_samba";

  commands:
      "/bin/systemctl reload smbd"
        contain => in_shell_and_silent,
        ifvarclass => "$(samba_server)_reload_samba";
}

bundle agent dns_server_setup
{
  vars:
      "pkgs" slist => {
        "pdns-server",
        "pdns-backend-bind",
      };

      "source_server"    string => "$(sys.policy_hub)";
      "source_directory" string => "$(def.dir_files)";

      "pdns_conf[master]"              string => "yes";
      "pdns_conf[distributor-threads]" string => "1";
      "pdns_conf[allow-axfr-ips]"      string => "216.218.133.2/32,2001:470:600::2";
      "pdns_conf[only-notify]"         string => "";
      "pdns_conf[also-notify]"         string => "216.218.130.2";

      "zones" slist => {
        "netrino.ru",
        "rootserv.ru",
      };

  packages:
      "$(pkgs)"
        package_policy => "addupdate",
        classes => if_ok("powerdns_installed");

  files:
    powerdns_installed::
      "/etc/powerdns/named.conf"
        copy_from => remote_cp("$(source_directory)/$(sys.host)/powerdns/named.conf", "$(source_server)"),
        perms => m("644");
      "/etc/powerdns/pdns.conf"
        create => "false",
        edit_line => set_line_based("$(this.bundle).pdns_conf", "=", "\s*=\s*", ".*", "\s*#\s*");
      "/etc/powerdns/$(zones)"
        copy_from => remote_cp("$(source_directory)/$(sys.host)/powerdns/$(zones)", "$(source_server)"),
        perms => m("644"),
        classes => if_repaired("zone_$(zones)_reload");

  commands:
      "/usr/bin/pdns_control bind-reload-now $(zones)"
        contain => silent,
        ifvarclass => classify("zone_$(zones)_reload");
}

bundle agent mail_server_setup
{
  vars:
      "pkgs" slist => {
        "postfix",
        "spamassassin",
        "spamc",
      };

      "maps" slist => { "access", "virtual" };

      "source_server"    string => "$(sys.policy_hub)";
      "source_directory" string => "$(def.dir_files)";

      "main_cf[smtpd_helo_required]"   string => "yes";
      "main_cf[smtp_helo_name]"        string => "smtp.netrino.ru";
      "main_cf[disable_vrfy_command]"  string => "yes";
      "main_cf[message_size_limit]"    string => "102400000";
      "main_cf[myhostname]"            string => "localhost";
      "main_cf[mydestination]"         string => "localhost.localdomain, localhost";
      "main_cf[mynetworks]"            string => "127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 216.172.65.242/32";
      "main_cf[virtual_alias_domains]" string => "netrino.ru";
      "main_cf[virtual_alias_maps]"    string => "hash:/etc/postfix/virtual";

      "main_cf[smtpd_tls_security_level]" string => "may";
      "main_cf[smtpd_tls_auth_only]"      string => "yes";

      "spamd_delivery_method" string => "spamassassin unix -     n       n       -       -       pipe
  flags=O user=debian-spamd argv=/usr/bin/spamc -u ${user} -f -e /usr/sbin/sendmail -oi -f ${sender} ${recipient}";

      "smtp_process_options"  string => "  -o content_filter=spamassassin";

  packages:
      "$(pkgs)"
        package_policy => "addupdate",
        classes => if_ok("postfix_installed");

  services:
      "spamassassin"
        service_policy => "enable";

  processes:
      "postfix"
        restart_class => "postfix_reload";

  files:
    postfix_installed::
      "/etc/postfix/$(maps)"
        copy_from => remote_cp("$(source_directory)/$(sys.host)/postfix/$(maps)", "$(source_server)"),
        perms => m("644"),
        classes => if_repaired("postfix_$(maps)_rehash");
      "/etc/postfix/$(maps).db"
        create => "true",
        transformer => "/usr/sbin/postmap /etc/postfix/$(maps)",
        ifvarclass => classify("postfix_$(maps)_rehash");
      "/etc/postfix/main.cf"
        create => "false",
        edit_line => set_line_based("$(this.bundle).main_cf", " = ", "\s*=\s*", ".*", "\s*#\s*"),
        classes => if_repaired("postfix_reload");
      "/etc/postfix/master.cf"
        create => "false",
        edit_line => append_if_no_line("$(spamd_delivery_method)"),
        classes => if_repaired("postfix_reload");
      "/etc/postfix/master.cf"
        create => "false",
        edit_line => append_after_line("smtp\s+.*", $(smtp_process_options)),
        classes => if_repaired("postfix_reload");

  commands:
    postfix_reload::
      "/bin/systemctl reload postfix"
        contain => silent;
}

bundle edit_line append_after_line(regex, string)
{
  insert_lines:
      "$(string)"
        location => afer($(regex));
}
